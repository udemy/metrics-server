// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha1(in *jlexer.Lexer, out *VolumeStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "pvcRef":
			if in.IsNull() {
				in.Skip()
				out.PVCRef = nil
			} else {
				if out.PVCRef == nil {
					out.PVCRef = new(PVCReference)
				}
				(*out.PVCRef).UnmarshalEasyJSON(in)
			}
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "availableBytes":
			if in.IsNull() {
				in.Skip()
				out.AvailableBytes = nil
			} else {
				if out.AvailableBytes == nil {
					out.AvailableBytes = new(uint64)
				}
				*out.AvailableBytes = uint64(in.Uint64())
			}
		case "capacityBytes":
			if in.IsNull() {
				in.Skip()
				out.CapacityBytes = nil
			} else {
				if out.CapacityBytes == nil {
					out.CapacityBytes = new(uint64)
				}
				*out.CapacityBytes = uint64(in.Uint64())
			}
		case "usedBytes":
			if in.IsNull() {
				in.Skip()
				out.UsedBytes = nil
			} else {
				if out.UsedBytes == nil {
					out.UsedBytes = new(uint64)
				}
				*out.UsedBytes = uint64(in.Uint64())
			}
		case "inodesFree":
			if in.IsNull() {
				in.Skip()
				out.InodesFree = nil
			} else {
				if out.InodesFree == nil {
					out.InodesFree = new(uint64)
				}
				*out.InodesFree = uint64(in.Uint64())
			}
		case "inodes":
			if in.IsNull() {
				in.Skip()
				out.Inodes = nil
			} else {
				if out.Inodes == nil {
					out.Inodes = new(uint64)
				}
				*out.Inodes = uint64(in.Uint64())
			}
		case "inodesUsed":
			if in.IsNull() {
				in.Skip()
				out.InodesUsed = nil
			} else {
				if out.InodesUsed == nil {
					out.InodesUsed = new(uint64)
				}
				*out.InodesUsed = uint64(in.Uint64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha1(out *jwriter.Writer, in VolumeStats) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.PVCRef != nil {
		const prefix string = ",\"pvcRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PVCRef).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Time).MarshalJSON())
	}
	if in.AvailableBytes != nil {
		const prefix string = ",\"availableBytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.AvailableBytes))
	}
	if in.CapacityBytes != nil {
		const prefix string = ",\"capacityBytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.CapacityBytes))
	}
	if in.UsedBytes != nil {
		const prefix string = ",\"usedBytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.UsedBytes))
	}
	if in.InodesFree != nil {
		const prefix string = ",\"inodesFree\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.InodesFree))
	}
	if in.Inodes != nil {
		const prefix string = ",\"inodes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.Inodes))
	}
	if in.InodesUsed != nil {
		const prefix string = ",\"inodesUsed\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.InodesUsed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VolumeStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VolumeStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VolumeStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VolumeStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha1(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha11(in *jlexer.Lexer, out *UserDefinedMetricDescriptor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = UserDefinedMetricType(in.String())
		case "units":
			out.Units = string(in.String())
		case "labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Labels = make(map[string]string)
				} else {
					out.Labels = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Labels)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha11(out *jwriter.Writer, in UserDefinedMetricDescriptor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Labels {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				out.String(string(v2Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserDefinedMetricDescriptor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserDefinedMetricDescriptor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserDefinedMetricDescriptor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserDefinedMetricDescriptor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha11(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha12(in *jlexer.Lexer, out *UserDefinedMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "value":
			out.Value = float64(in.Float64())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = UserDefinedMetricType(in.String())
		case "units":
			out.Units = string(in.String())
		case "labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Labels = make(map[string]string)
				} else {
					out.Labels = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 string
					v3 = string(in.String())
					(out.Labels)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha12(out *jwriter.Writer, in UserDefinedMetric) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"units\":"
		out.RawString(prefix)
		out.String(string(in.Units))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Labels {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.String(string(v4Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserDefinedMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserDefinedMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserDefinedMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserDefinedMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha12(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha13(in *jlexer.Lexer, out *Summary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "node":
			(out.Node).UnmarshalEasyJSON(in)
		case "pods":
			if in.IsNull() {
				in.Skip()
				out.Pods = nil
			} else {
				in.Delim('[')
				if out.Pods == nil {
					if !in.IsDelim(']') {
						out.Pods = make([]PodStats, 0, 1)
					} else {
						out.Pods = []PodStats{}
					}
				} else {
					out.Pods = (out.Pods)[:0]
				}
				for !in.IsDelim(']') {
					var v5 PodStats
					(v5).UnmarshalEasyJSON(in)
					out.Pods = append(out.Pods, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha13(out *jwriter.Writer, in Summary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"node\":"
		out.RawString(prefix[1:])
		(in.Node).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"pods\":"
		out.RawString(prefix)
		if in.Pods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Pods {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Summary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Summary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Summary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Summary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha13(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha14(in *jlexer.Lexer, out *RuntimeStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "imageFs":
			if in.IsNull() {
				in.Skip()
				out.ImageFs = nil
			} else {
				if out.ImageFs == nil {
					out.ImageFs = new(FsStats)
				}
				(*out.ImageFs).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha14(out *jwriter.Writer, in RuntimeStats) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ImageFs != nil {
		const prefix string = ",\"imageFs\":"
		first = false
		out.RawString(prefix[1:])
		(*in.ImageFs).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RuntimeStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RuntimeStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RuntimeStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RuntimeStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha14(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha15(in *jlexer.Lexer, out *RlimitStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "maxpid":
			if in.IsNull() {
				in.Skip()
				out.MaxPID = nil
			} else {
				if out.MaxPID == nil {
					out.MaxPID = new(int64)
				}
				*out.MaxPID = int64(in.Int64())
			}
		case "curproc":
			if in.IsNull() {
				in.Skip()
				out.NumOfRunningProcesses = nil
			} else {
				if out.NumOfRunningProcesses == nil {
					out.NumOfRunningProcesses = new(int64)
				}
				*out.NumOfRunningProcesses = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha15(out *jwriter.Writer, in RlimitStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	if in.MaxPID != nil {
		const prefix string = ",\"maxpid\":"
		out.RawString(prefix)
		out.Int64(int64(*in.MaxPID))
	}
	if in.NumOfRunningProcesses != nil {
		const prefix string = ",\"curproc\":"
		out.RawString(prefix)
		out.Int64(int64(*in.NumOfRunningProcesses))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RlimitStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RlimitStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RlimitStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RlimitStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha15(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha16(in *jlexer.Lexer, out *PodStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "podRef":
			(out.PodRef).UnmarshalEasyJSON(in)
		case "startTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartTime).UnmarshalJSON(data))
			}
		case "containers":
			if in.IsNull() {
				in.Skip()
				out.Containers = nil
			} else {
				in.Delim('[')
				if out.Containers == nil {
					if !in.IsDelim(']') {
						out.Containers = make([]ContainerStats, 0, 1)
					} else {
						out.Containers = []ContainerStats{}
					}
				} else {
					out.Containers = (out.Containers)[:0]
				}
				for !in.IsDelim(']') {
					var v8 ContainerStats
					(v8).UnmarshalEasyJSON(in)
					out.Containers = append(out.Containers, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cpu":
			if in.IsNull() {
				in.Skip()
				out.CPU = nil
			} else {
				if out.CPU == nil {
					out.CPU = new(CPUStats)
				}
				(*out.CPU).UnmarshalEasyJSON(in)
			}
		case "memory":
			if in.IsNull() {
				in.Skip()
				out.Memory = nil
			} else {
				if out.Memory == nil {
					out.Memory = new(MemoryStats)
				}
				(*out.Memory).UnmarshalEasyJSON(in)
			}
		case "network":
			if in.IsNull() {
				in.Skip()
				out.Network = nil
			} else {
				if out.Network == nil {
					out.Network = new(NetworkStats)
				}
				(*out.Network).UnmarshalEasyJSON(in)
			}
		case "volume":
			if in.IsNull() {
				in.Skip()
				out.VolumeStats = nil
			} else {
				in.Delim('[')
				if out.VolumeStats == nil {
					if !in.IsDelim(']') {
						out.VolumeStats = make([]VolumeStats, 0, 1)
					} else {
						out.VolumeStats = []VolumeStats{}
					}
				} else {
					out.VolumeStats = (out.VolumeStats)[:0]
				}
				for !in.IsDelim(']') {
					var v9 VolumeStats
					(v9).UnmarshalEasyJSON(in)
					out.VolumeStats = append(out.VolumeStats, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ephemeral-storage":
			if in.IsNull() {
				in.Skip()
				out.EphemeralStorage = nil
			} else {
				if out.EphemeralStorage == nil {
					out.EphemeralStorage = new(FsStats)
				}
				(*out.EphemeralStorage).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha16(out *jwriter.Writer, in PodStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"podRef\":"
		out.RawString(prefix[1:])
		(in.PodRef).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"startTime\":"
		out.RawString(prefix)
		out.Raw((in.StartTime).MarshalJSON())
	}
	{
		const prefix string = ",\"containers\":"
		out.RawString(prefix)
		if in.Containers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Containers {
				if v10 > 0 {
					out.RawByte(',')
				}
				(v11).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.CPU != nil {
		const prefix string = ",\"cpu\":"
		out.RawString(prefix)
		(*in.CPU).MarshalEasyJSON(out)
	}
	if in.Memory != nil {
		const prefix string = ",\"memory\":"
		out.RawString(prefix)
		(*in.Memory).MarshalEasyJSON(out)
	}
	if in.Network != nil {
		const prefix string = ",\"network\":"
		out.RawString(prefix)
		(*in.Network).MarshalEasyJSON(out)
	}
	if len(in.VolumeStats) != 0 {
		const prefix string = ",\"volume\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v12, v13 := range in.VolumeStats {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.EphemeralStorage != nil {
		const prefix string = ",\"ephemeral-storage\":"
		out.RawString(prefix)
		(*in.EphemeralStorage).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PodStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PodStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PodStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PodStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha16(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha17(in *jlexer.Lexer, out *PodReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		case "uid":
			out.UID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha17(out *jwriter.Writer, in PodReference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix)
		out.String(string(in.Namespace))
	}
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PodReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PodReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PodReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PodReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha17(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha18(in *jlexer.Lexer, out *PVCReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha18(out *jwriter.Writer, in PVCReference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix)
		out.String(string(in.Namespace))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PVCReference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PVCReference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PVCReference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PVCReference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha18(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha19(in *jlexer.Lexer, out *NodeStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodeName":
			out.NodeName = string(in.String())
		case "systemContainers":
			if in.IsNull() {
				in.Skip()
				out.SystemContainers = nil
			} else {
				in.Delim('[')
				if out.SystemContainers == nil {
					if !in.IsDelim(']') {
						out.SystemContainers = make([]ContainerStats, 0, 1)
					} else {
						out.SystemContainers = []ContainerStats{}
					}
				} else {
					out.SystemContainers = (out.SystemContainers)[:0]
				}
				for !in.IsDelim(']') {
					var v14 ContainerStats
					(v14).UnmarshalEasyJSON(in)
					out.SystemContainers = append(out.SystemContainers, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "startTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartTime).UnmarshalJSON(data))
			}
		case "cpu":
			if in.IsNull() {
				in.Skip()
				out.CPU = nil
			} else {
				if out.CPU == nil {
					out.CPU = new(CPUStats)
				}
				(*out.CPU).UnmarshalEasyJSON(in)
			}
		case "memory":
			if in.IsNull() {
				in.Skip()
				out.Memory = nil
			} else {
				if out.Memory == nil {
					out.Memory = new(MemoryStats)
				}
				(*out.Memory).UnmarshalEasyJSON(in)
			}
		case "network":
			if in.IsNull() {
				in.Skip()
				out.Network = nil
			} else {
				if out.Network == nil {
					out.Network = new(NetworkStats)
				}
				(*out.Network).UnmarshalEasyJSON(in)
			}
		case "fs":
			if in.IsNull() {
				in.Skip()
				out.Fs = nil
			} else {
				if out.Fs == nil {
					out.Fs = new(FsStats)
				}
				(*out.Fs).UnmarshalEasyJSON(in)
			}
		case "runtime":
			if in.IsNull() {
				in.Skip()
				out.Runtime = nil
			} else {
				if out.Runtime == nil {
					out.Runtime = new(RuntimeStats)
				}
				(*out.Runtime).UnmarshalEasyJSON(in)
			}
		case "rlimit":
			if in.IsNull() {
				in.Skip()
				out.Rlimit = nil
			} else {
				if out.Rlimit == nil {
					out.Rlimit = new(RlimitStats)
				}
				(*out.Rlimit).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha19(out *jwriter.Writer, in NodeStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodeName\":"
		out.RawString(prefix[1:])
		out.String(string(in.NodeName))
	}
	if len(in.SystemContainers) != 0 {
		const prefix string = ",\"systemContainers\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v15, v16 := range in.SystemContainers {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"startTime\":"
		out.RawString(prefix)
		out.Raw((in.StartTime).MarshalJSON())
	}
	if in.CPU != nil {
		const prefix string = ",\"cpu\":"
		out.RawString(prefix)
		(*in.CPU).MarshalEasyJSON(out)
	}
	if in.Memory != nil {
		const prefix string = ",\"memory\":"
		out.RawString(prefix)
		(*in.Memory).MarshalEasyJSON(out)
	}
	if in.Network != nil {
		const prefix string = ",\"network\":"
		out.RawString(prefix)
		(*in.Network).MarshalEasyJSON(out)
	}
	if in.Fs != nil {
		const prefix string = ",\"fs\":"
		out.RawString(prefix)
		(*in.Fs).MarshalEasyJSON(out)
	}
	if in.Runtime != nil {
		const prefix string = ",\"runtime\":"
		out.RawString(prefix)
		(*in.Runtime).MarshalEasyJSON(out)
	}
	if in.Rlimit != nil {
		const prefix string = ",\"rlimit\":"
		out.RawString(prefix)
		(*in.Rlimit).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NodeStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NodeStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NodeStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NodeStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha19(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha110(in *jlexer.Lexer, out *NetworkStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "interfaces":
			if in.IsNull() {
				in.Skip()
				out.Interfaces = nil
			} else {
				in.Delim('[')
				if out.Interfaces == nil {
					if !in.IsDelim(']') {
						out.Interfaces = make([]InterfaceStats, 0, 1)
					} else {
						out.Interfaces = []InterfaceStats{}
					}
				} else {
					out.Interfaces = (out.Interfaces)[:0]
				}
				for !in.IsDelim(']') {
					var v17 InterfaceStats
					(v17).UnmarshalEasyJSON(in)
					out.Interfaces = append(out.Interfaces, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		case "rxBytes":
			if in.IsNull() {
				in.Skip()
				out.RxBytes = nil
			} else {
				if out.RxBytes == nil {
					out.RxBytes = new(uint64)
				}
				*out.RxBytes = uint64(in.Uint64())
			}
		case "rxErrors":
			if in.IsNull() {
				in.Skip()
				out.RxErrors = nil
			} else {
				if out.RxErrors == nil {
					out.RxErrors = new(uint64)
				}
				*out.RxErrors = uint64(in.Uint64())
			}
		case "txBytes":
			if in.IsNull() {
				in.Skip()
				out.TxBytes = nil
			} else {
				if out.TxBytes == nil {
					out.TxBytes = new(uint64)
				}
				*out.TxBytes = uint64(in.Uint64())
			}
		case "txErrors":
			if in.IsNull() {
				in.Skip()
				out.TxErrors = nil
			} else {
				if out.TxErrors == nil {
					out.TxErrors = new(uint64)
				}
				*out.TxErrors = uint64(in.Uint64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha110(out *jwriter.Writer, in NetworkStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	if len(in.Interfaces) != 0 {
		const prefix string = ",\"interfaces\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v18, v19 := range in.Interfaces {
				if v18 > 0 {
					out.RawByte(',')
				}
				(v19).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.RxBytes != nil {
		const prefix string = ",\"rxBytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.RxBytes))
	}
	if in.RxErrors != nil {
		const prefix string = ",\"rxErrors\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.RxErrors))
	}
	if in.TxBytes != nil {
		const prefix string = ",\"txBytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.TxBytes))
	}
	if in.TxErrors != nil {
		const prefix string = ",\"txErrors\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.TxErrors))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NetworkStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha110(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NetworkStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha110(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NetworkStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha110(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NetworkStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha110(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha111(in *jlexer.Lexer, out *MemoryStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "availableBytes":
			if in.IsNull() {
				in.Skip()
				out.AvailableBytes = nil
			} else {
				if out.AvailableBytes == nil {
					out.AvailableBytes = new(uint64)
				}
				*out.AvailableBytes = uint64(in.Uint64())
			}
		case "usageBytes":
			if in.IsNull() {
				in.Skip()
				out.UsageBytes = nil
			} else {
				if out.UsageBytes == nil {
					out.UsageBytes = new(uint64)
				}
				*out.UsageBytes = uint64(in.Uint64())
			}
		case "workingSetBytes":
			if in.IsNull() {
				in.Skip()
				out.WorkingSetBytes = nil
			} else {
				if out.WorkingSetBytes == nil {
					out.WorkingSetBytes = new(uint64)
				}
				*out.WorkingSetBytes = uint64(in.Uint64())
			}
		case "rssBytes":
			if in.IsNull() {
				in.Skip()
				out.RSSBytes = nil
			} else {
				if out.RSSBytes == nil {
					out.RSSBytes = new(uint64)
				}
				*out.RSSBytes = uint64(in.Uint64())
			}
		case "pageFaults":
			if in.IsNull() {
				in.Skip()
				out.PageFaults = nil
			} else {
				if out.PageFaults == nil {
					out.PageFaults = new(uint64)
				}
				*out.PageFaults = uint64(in.Uint64())
			}
		case "majorPageFaults":
			if in.IsNull() {
				in.Skip()
				out.MajorPageFaults = nil
			} else {
				if out.MajorPageFaults == nil {
					out.MajorPageFaults = new(uint64)
				}
				*out.MajorPageFaults = uint64(in.Uint64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha111(out *jwriter.Writer, in MemoryStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	if in.AvailableBytes != nil {
		const prefix string = ",\"availableBytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.AvailableBytes))
	}
	if in.UsageBytes != nil {
		const prefix string = ",\"usageBytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.UsageBytes))
	}
	if in.WorkingSetBytes != nil {
		const prefix string = ",\"workingSetBytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.WorkingSetBytes))
	}
	if in.RSSBytes != nil {
		const prefix string = ",\"rssBytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.RSSBytes))
	}
	if in.PageFaults != nil {
		const prefix string = ",\"pageFaults\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.PageFaults))
	}
	if in.MajorPageFaults != nil {
		const prefix string = ",\"majorPageFaults\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.MajorPageFaults))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MemoryStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha111(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MemoryStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha111(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MemoryStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha111(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MemoryStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha111(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha112(in *jlexer.Lexer, out *InterfaceStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "rxBytes":
			if in.IsNull() {
				in.Skip()
				out.RxBytes = nil
			} else {
				if out.RxBytes == nil {
					out.RxBytes = new(uint64)
				}
				*out.RxBytes = uint64(in.Uint64())
			}
		case "rxErrors":
			if in.IsNull() {
				in.Skip()
				out.RxErrors = nil
			} else {
				if out.RxErrors == nil {
					out.RxErrors = new(uint64)
				}
				*out.RxErrors = uint64(in.Uint64())
			}
		case "txBytes":
			if in.IsNull() {
				in.Skip()
				out.TxBytes = nil
			} else {
				if out.TxBytes == nil {
					out.TxBytes = new(uint64)
				}
				*out.TxBytes = uint64(in.Uint64())
			}
		case "txErrors":
			if in.IsNull() {
				in.Skip()
				out.TxErrors = nil
			} else {
				if out.TxErrors == nil {
					out.TxErrors = new(uint64)
				}
				*out.TxErrors = uint64(in.Uint64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha112(out *jwriter.Writer, in InterfaceStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.RxBytes != nil {
		const prefix string = ",\"rxBytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.RxBytes))
	}
	if in.RxErrors != nil {
		const prefix string = ",\"rxErrors\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.RxErrors))
	}
	if in.TxBytes != nil {
		const prefix string = ",\"txBytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.TxBytes))
	}
	if in.TxErrors != nil {
		const prefix string = ",\"txErrors\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.TxErrors))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InterfaceStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha112(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InterfaceStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha112(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InterfaceStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha112(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InterfaceStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha112(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha113(in *jlexer.Lexer, out *FsStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "availableBytes":
			if in.IsNull() {
				in.Skip()
				out.AvailableBytes = nil
			} else {
				if out.AvailableBytes == nil {
					out.AvailableBytes = new(uint64)
				}
				*out.AvailableBytes = uint64(in.Uint64())
			}
		case "capacityBytes":
			if in.IsNull() {
				in.Skip()
				out.CapacityBytes = nil
			} else {
				if out.CapacityBytes == nil {
					out.CapacityBytes = new(uint64)
				}
				*out.CapacityBytes = uint64(in.Uint64())
			}
		case "usedBytes":
			if in.IsNull() {
				in.Skip()
				out.UsedBytes = nil
			} else {
				if out.UsedBytes == nil {
					out.UsedBytes = new(uint64)
				}
				*out.UsedBytes = uint64(in.Uint64())
			}
		case "inodesFree":
			if in.IsNull() {
				in.Skip()
				out.InodesFree = nil
			} else {
				if out.InodesFree == nil {
					out.InodesFree = new(uint64)
				}
				*out.InodesFree = uint64(in.Uint64())
			}
		case "inodes":
			if in.IsNull() {
				in.Skip()
				out.Inodes = nil
			} else {
				if out.Inodes == nil {
					out.Inodes = new(uint64)
				}
				*out.Inodes = uint64(in.Uint64())
			}
		case "inodesUsed":
			if in.IsNull() {
				in.Skip()
				out.InodesUsed = nil
			} else {
				if out.InodesUsed == nil {
					out.InodesUsed = new(uint64)
				}
				*out.InodesUsed = uint64(in.Uint64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha113(out *jwriter.Writer, in FsStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	if in.AvailableBytes != nil {
		const prefix string = ",\"availableBytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.AvailableBytes))
	}
	if in.CapacityBytes != nil {
		const prefix string = ",\"capacityBytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.CapacityBytes))
	}
	if in.UsedBytes != nil {
		const prefix string = ",\"usedBytes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.UsedBytes))
	}
	if in.InodesFree != nil {
		const prefix string = ",\"inodesFree\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.InodesFree))
	}
	if in.Inodes != nil {
		const prefix string = ",\"inodes\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.Inodes))
	}
	if in.InodesUsed != nil {
		const prefix string = ",\"inodesUsed\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.InodesUsed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FsStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha113(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FsStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha113(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FsStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha113(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FsStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha113(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha114(in *jlexer.Lexer, out *ContainerStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "startTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartTime).UnmarshalJSON(data))
			}
		case "cpu":
			if in.IsNull() {
				in.Skip()
				out.CPU = nil
			} else {
				if out.CPU == nil {
					out.CPU = new(CPUStats)
				}
				(*out.CPU).UnmarshalEasyJSON(in)
			}
		case "memory":
			if in.IsNull() {
				in.Skip()
				out.Memory = nil
			} else {
				if out.Memory == nil {
					out.Memory = new(MemoryStats)
				}
				(*out.Memory).UnmarshalEasyJSON(in)
			}
		case "accelerators":
			if in.IsNull() {
				in.Skip()
				out.Accelerators = nil
			} else {
				in.Delim('[')
				if out.Accelerators == nil {
					if !in.IsDelim(']') {
						out.Accelerators = make([]AcceleratorStats, 0, 1)
					} else {
						out.Accelerators = []AcceleratorStats{}
					}
				} else {
					out.Accelerators = (out.Accelerators)[:0]
				}
				for !in.IsDelim(']') {
					var v20 AcceleratorStats
					(v20).UnmarshalEasyJSON(in)
					out.Accelerators = append(out.Accelerators, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rootfs":
			if in.IsNull() {
				in.Skip()
				out.Rootfs = nil
			} else {
				if out.Rootfs == nil {
					out.Rootfs = new(FsStats)
				}
				(*out.Rootfs).UnmarshalEasyJSON(in)
			}
		case "logs":
			if in.IsNull() {
				in.Skip()
				out.Logs = nil
			} else {
				if out.Logs == nil {
					out.Logs = new(FsStats)
				}
				(*out.Logs).UnmarshalEasyJSON(in)
			}
		case "userDefinedMetrics":
			if in.IsNull() {
				in.Skip()
				out.UserDefinedMetrics = nil
			} else {
				in.Delim('[')
				if out.UserDefinedMetrics == nil {
					if !in.IsDelim(']') {
						out.UserDefinedMetrics = make([]UserDefinedMetric, 0, 1)
					} else {
						out.UserDefinedMetrics = []UserDefinedMetric{}
					}
				} else {
					out.UserDefinedMetrics = (out.UserDefinedMetrics)[:0]
				}
				for !in.IsDelim(']') {
					var v21 UserDefinedMetric
					(v21).UnmarshalEasyJSON(in)
					out.UserDefinedMetrics = append(out.UserDefinedMetrics, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha114(out *jwriter.Writer, in ContainerStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"startTime\":"
		out.RawString(prefix)
		out.Raw((in.StartTime).MarshalJSON())
	}
	if in.CPU != nil {
		const prefix string = ",\"cpu\":"
		out.RawString(prefix)
		(*in.CPU).MarshalEasyJSON(out)
	}
	if in.Memory != nil {
		const prefix string = ",\"memory\":"
		out.RawString(prefix)
		(*in.Memory).MarshalEasyJSON(out)
	}
	if len(in.Accelerators) != 0 {
		const prefix string = ",\"accelerators\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v22, v23 := range in.Accelerators {
				if v22 > 0 {
					out.RawByte(',')
				}
				(v23).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Rootfs != nil {
		const prefix string = ",\"rootfs\":"
		out.RawString(prefix)
		(*in.Rootfs).MarshalEasyJSON(out)
	}
	if in.Logs != nil {
		const prefix string = ",\"logs\":"
		out.RawString(prefix)
		(*in.Logs).MarshalEasyJSON(out)
	}
	if len(in.UserDefinedMetrics) != 0 {
		const prefix string = ",\"userDefinedMetrics\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v24, v25 := range in.UserDefinedMetrics {
				if v24 > 0 {
					out.RawByte(',')
				}
				(v25).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContainerStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha114(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContainerStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha114(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContainerStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha114(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContainerStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha114(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha115(in *jlexer.Lexer, out *CPUStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "usageNanoCores":
			if in.IsNull() {
				in.Skip()
				out.UsageNanoCores = nil
			} else {
				if out.UsageNanoCores == nil {
					out.UsageNanoCores = new(uint64)
				}
				*out.UsageNanoCores = uint64(in.Uint64())
			}
		case "usageCoreNanoSeconds":
			if in.IsNull() {
				in.Skip()
				out.UsageCoreNanoSeconds = nil
			} else {
				if out.UsageCoreNanoSeconds == nil {
					out.UsageCoreNanoSeconds = new(uint64)
				}
				*out.UsageCoreNanoSeconds = uint64(in.Uint64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha115(out *jwriter.Writer, in CPUStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	if in.UsageNanoCores != nil {
		const prefix string = ",\"usageNanoCores\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.UsageNanoCores))
	}
	if in.UsageCoreNanoSeconds != nil {
		const prefix string = ",\"usageCoreNanoSeconds\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.UsageCoreNanoSeconds))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CPUStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha115(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CPUStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha115(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CPUStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha115(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CPUStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha115(l, v)
}
func easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha116(in *jlexer.Lexer, out *AcceleratorStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "make":
			out.Make = string(in.String())
		case "model":
			out.Model = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "memoryTotal":
			out.MemoryTotal = uint64(in.Uint64())
		case "memoryUsed":
			out.MemoryUsed = uint64(in.Uint64())
		case "dutyCycle":
			out.DutyCycle = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha116(out *jwriter.Writer, in AcceleratorStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"make\":"
		out.RawString(prefix[1:])
		out.String(string(in.Make))
	}
	{
		const prefix string = ",\"model\":"
		out.RawString(prefix)
		out.String(string(in.Model))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"memoryTotal\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.MemoryTotal))
	}
	{
		const prefix string = ",\"memoryUsed\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.MemoryUsed))
	}
	{
		const prefix string = ",\"dutyCycle\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.DutyCycle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AcceleratorStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha116(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AcceleratorStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeK8sIoKubernetesPkgKubeletApisStatsV1alpha116(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AcceleratorStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha116(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AcceleratorStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeK8sIoKubernetesPkgKubeletApisStatsV1alpha116(l, v)
}
